webpackJsonp([0],{1056:function(t,n,e){var a=e(2),i=e(53),l=e(384).PageRenderer;l.__esModule&&(l=l.default);var s=i({displayName:"WrappedPageRenderer",getInitialState:function(){return{content:e(1070)}},componentWillMount:function(){},render:function(){return a.createElement(l,Object.assign({},this.props,{content:this.state.content}))}});s.__catalog_loader__=!0,t.exports=s},1070:function(t,n){t.exports="```hint\nExperimental warning: The styled inputs below are based off of Faithlife Sites and may not be consistent with the new styled controls, prefer to use Bootstrap components where possible.\n```\n\n### Validated input\n\nA standard text input control with local validation. \\`TextInput.Input\\` is used as a render prop so that additional input properties can be set, such as \\`placeholder\\`.\n\n```react\nshowSource: true\nstate: { isValid: false, value: '' }\n---\n<div className=\"container\">\n\t<style>\n\t{`\n\t\t.container {\n\t\t\tfont-family: 'Source Sans Pro';\n\t\t\tcolor: #333333;\n\t\t}\n\t\t.inputWrapper {\n\t\t\tmax-width: 300px;\n\t\t}\n\t\t.container > * {\n\t\t\tmargin: 8px;\n\t\t}\n\t`}\n\t</style>\n\t<div className=\"inputWrapper\">\n\t\t<ValidatedInput\n\t\t\tvalue={state.value}\n\t\t\tonValidationChange={newState => {\n\t\t\t\tif (newState.isValid != null) {\n\t\t\t\t\tsetState({ isValid: newState.isValid });\n\t\t\t\t}\n\t\t\t\tif (newState.inputValue != null) {\n\t\t\t\t\tsetState({ validatedValue: newState.inputValue });\n\t\t\t\t}\n\t\t\t}}\n\t\t\tgetIsValidInput={value => ({\n\t\t\t\tisValid: value !== 'error',\n\t\t\t\tvalidationErrorString: 'This is a custom error message',\n\t\t\t})}\n\t\t\tdebounce={200}\n\t\t\tplaceholder=\"Bellingham\"\n\t\t\ttitle=\"Location\"\n\t\t\thelp={<span>Try typing 'error'</span>}\n\t\t/>\n\t</div>\n\t<Button primary medium disabled={!state.isValid}>\n\t\tSave\n\t</Button>\n</div>\n```\n\n### No validation\n\n```react\nshowSource: true\nstate: { isValid: false, value: '' }\n---\n<div className=\"container\">\n\t<style>\n\t{`\n\t\t.container {\n\t\t\tfont-family: 'Source Sans Pro';\n\t\t\tcolor: #333333;\n\t\t}\n\t\t.inputWrapper {\n\t\t\tmax-width: 300px;\n\t\t}\n\t\t.container > * {\n\t\t\tmargin: 8px;\n\t\t}\n\t`}\n\t</style>\n\t<div className=\"inputWrapper\">\n\t\t<Input\n\t\t\tvalue={state.value}\n\t\t\tonChange={value => setState({ value: value, isValid: value !== '' })}\n\t\t\tplaceholder=\"Bellingham\"\n\t\t\ttitle=\"Location\"\n\t\t\tdebounce={200}\n\t\t/>\n\t</div>\n\t<Button primary medium disabled={!state.isValid}>\n\t\tSave\n\t</Button>\n</div>\n```\n\n### Remote API Validation\n\nSimulates making a network call to validate the field, using a Promise which takes 500 ms to resolve.\n\n```react\nshowSource: true\nstate: { isValid: false, value: '' }\n---\n<div className=\"container\">\n\t<style>\n\t{`\n\t\t.container {\n\t\t\tfont-family: 'Source Sans Pro';\n\t\t\tcolor: #333333;\n\t\t}\n\t\t.inputWrapper {\n\t\t\tmax-width: 300px;\n\t\t}\n\t\t.container > * {\n\t\t\tmargin: 8px;\n\t\t}\n\t`}\n\t</style>\n\t<div className=\"inputWrapper\">\n\t\t<ValidatedInput\n\t\t\tvalue={state.value}\n\t\t\tonValidationChange={newState => {\n\t\t\t\tif (newState.isValid != null) {\n\t\t\t\t\tsetState({ isValid: newState.isValid });\n\t\t\t\t}\n\t\t\t\tif (newState.inputValue != null) {\n\t\t\t\t\tsetState({ value: newState.inputValue });\n\t\t\t\t}\n\t\t\t}}\n\t\t\tgetIsValidInput={value =>\n\t\t\t\tdelayPromise(500).then(() =>\n\t\t\t\t\tPromise.resolve({\n\t\t\t\t\t\tisValid: value !== 'error',\n\t\t\t\t\t\tvalidationErrorString: 'This is a custom error message',\n\t\t\t\t\t}),\n\t\t\t\t)\n\t\t\t}\n\t\t\tdebounce={200}\n\t\t\tplaceholder=\"Bellingham\"\n\t\t\ttitle=\"Location\"\n\t\t\thelp={<span>Try typing 'error'</span>}\n\t\t/>\n\t</div>\n\t<Button primary medium disabled={!state.isValid}>\n\t\tSave\n\t</Button>\n</div>\n```\n\nAPI calls can sometimes fail. When this happens, the control will show a generic error message.\n\n```react\nshowSource: true\nstate: { isValid: false, value: '' }\n---\n<div className=\"container\">\n\t<style>\n\t{`\n\t\t.container {\n\t\t\tfont-family: 'Source Sans Pro';\n\t\t\tcolor: #333333;\n\t\t}\n\t\t.inputWrapper {\n\t\t\tmax-width: 300px;\n\t\t}\n\t\t.container > * {\n\t\t\tmargin: 8px;\n\t\t}\n\t`}\n\t</style>\n\t<div className=\"inputWrapper\">\n\t\t<ValidatedInput\n\t\t\tvalue={state.value}\n\t\t\tonValidationChange={newState => {\n\t\t\t\tif (newState.isValid != null) {\n\t\t\t\t\tsetState({ isValid: newState.isValid });\n\t\t\t\t}\n\t\t\t\tif (newState.inputValue != null) {\n\t\t\t\t\tsetState({ value: newState.inputValue });\n\t\t\t\t}\n\t\t\t}}\n\t\t\tgetIsValidInput={value =>\n\t\t\t\tdelayPromise(500).then(() =>\n\t\t\t\t\tPromise.reject()\n\t\t\t\t)\n\t\t\t}\n\t\t\tdebounce={200}\n\t\t\tplaceholder=\"Bellingham\"\n\t\t\ttitle=\"Location\"\n\t\t\thelp={<span>Try typing 'error'</span>}\n\t\t/>\n\t</div>\n\t<Button primary medium disabled={!state.isValid}>\n\t\tSave\n\t</Button>\n</div>\n```\n\n"}});
//# sourceMappingURL=0.10a17c16.chunk.js.map